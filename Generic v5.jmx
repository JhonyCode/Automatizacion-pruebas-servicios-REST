<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Plan de Pruebas" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables definidas por el Usuario" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">C:\Users\GreenSQA\Downloads\Nueva carpeta\JmeterExcel.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Grupo de Hilos" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Bucle" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables definidas por el Usuario" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="data" elementType="Argument">
              <stringProp name="Argument.name">data</stringProp>
              <stringProp name="Argument.value">D:\\Jhony\\jmeter\\Script\\data.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="i" elementType="Argument">
              <stringProp name="Argument.name">i</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Script old" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CargarParametros" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.jmeter.threads.JMeterVariables;
import org.apache.jmeter.protocol.http.control.Header;
import org.jmeter.excel.*;

log.info(&quot;inicio&quot;);

String ruta = vars.get(&quot;data&quot;);

Work work = new Work(ruta);
        
ArrayList&lt;Parametro&gt; lasPropiedades = work.getSheetParametros().getListPropiedades();
        
for (Parametro parametro:lasPropiedades) {
   vars.put(parametro.getName(), parametro.getValue());
   log.info(parametro.getName());
}

work.close();



/*import org.apache.jmeter.threads.JMeterVariables;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.jmeter.protocol.http.control.Header;

log.info(&quot;inicio&quot;);

String ruta = vars.get(&quot;data&quot;);

InputStream input = new FileInputStream(new File(ruta));
XSSFWorkbook wb = new XSSFWorkbook(input);
Sheet sheet = wb.getSheet(&quot;parametros&quot;);
Row row = sheet.getRow(0);
Cell cell = row.getCell(1);


log.info(&quot;el valor encontrado es la IP es  &quot;+cell.getStringCellValue());
vars.put(&quot;IP&quot;, cell.getStringCellValue());

row = sheet.getRow(1);
cell = row.getCell(1);

log.info(&quot;el valor encontrado es la Ruta es  &quot;+cell.getStringCellValue());
vars.put(&quot;Ruta&quot;, cell.getStringCellValue());

row = sheet.getRow(2);
cell = row.getCell(1);

log.info(&quot;el valor encontrado es la Method es  &quot;+cell.getStringCellValue());
vars.put(&quot;Method&quot;, cell.getStringCellValue());

row = sheet.getRow(3);
cell = row.getCell(1);

log.info(&quot;el valor encontrado es la Protocol es  &quot;+cell.getStringCellValue());
vars.put(&quot;Protocol&quot;, cell.getStringCellValue());

row = sheet.getRow(4);
cell = row.getCell(1);

long portValue = (long)cell.getNumericCellValue();
		 		
log.info(&quot;el valor encontrado es la Puerto es  &quot;+portValue);
vars.put(&quot;Puerto&quot;, portValue.toString());

input.close();</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="CargarCuerpo" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">/*import org.apache.jmeter.threads.JMeterVariables;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.jmeter.protocol.http.control.Header;*/

import java.util.ArrayList;
import org.jmeter.excel.*;

log.info(&quot;inicio&quot;);

//sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
//sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;,&quot;Bearer &quot; + vars.get(&quot;i&quot;)));

String ruta = vars.get(&quot;data&quot;);
String indice = vars.get(&quot;i&quot;);

int num = Integer.parseInt(indice);
int contador;
boolean isHeader = true;


InputStream input = new FileInputStream(new File(ruta));
XSSFWorkbook wb = new XSSFWorkbook(input);
Sheet sheet = wb.getSheet(&quot;data&quot;);

ArrayList&lt;Row&gt; listRow = new ArrayList&lt;String&gt;();

listRow.add(sheet.getRow(0));
listRow.add(sheet.getRow(1));
listRow.add(sheet.getRow(num));

int column = sheet.getRow(0).getLastCellNum();

//Row rowCabezera = sheet.getRow(0);
//Row rowPropiedades = sheet.getRow(1);
//Row rowValores = sheet.getRow(num); 

log.info(&quot;numero de columnas es &quot;+column);

//Iterator&lt;Cell&gt; cellIterator = rowValores.cellIterator(); 


 	for(int j=0;j&lt;column;j++) { 
 		
 		       
		Cell cell = listRow.get(2).getCell(j);

		if(listRow.get(0).getCell(j).getStringCellValue().equals(&quot;Body&quot;)){
			isHeader = false;
			contador=1;
			log.info(&quot;Se encontro el body &quot;);
		}
		
		 switch (cell.getCellType()) {
		 	case &quot;STRING&quot;:
		 	if(isHeader){
		 		String headerParam =&quot;header-&quot;+j;
		 		vars.put(headerParam,cell.getStringCellValue());
		 		sampler.getHeaderManager().removeHeaderNamed(listRow.get(1).getCell(j).getStringCellValue());
				sampler.getHeaderManager().add(new Header(listRow.get(1).getCell(j).getStringCellValue(),vars.get(headerParam)));
		 		//log.info(&quot;agrego &quot;+listRow.get(1).getCell(j).getStringCellValue());
		 		}
		 		else{
		 			String bodyParam = &quot;body-&quot;+contador;
		 			vars.put(bodyParam,cell.getStringCellValue());
		 			contador++;
		 			log.info(&quot;cuerpo es &quot;+cell.getStringCellValue());
		 		}
		 	//log.info(&quot;se leyo &quot;+listRow.get(1).getCell(j).getStringCellValue());
		 	break;
			case &quot;BLANK&quot;:
			if(isHeader){
		 		String headerParam =&quot;header-&quot;+j;
		 		vars.put(headerParam,cell.getStringCellValue());
		 		sampler.getHeaderManager().removeHeaderNamed(listRow.get(1).getCell(j).getStringCellValue());
				sampler.getHeaderManager().add(new Header(listRow.get(1).getCell(j).getStringCellValue(),vars.get(headerParam)));
		 		//log.info(&quot;agrego &quot;+listRow.get(1).getCell(j).getStringCellValue());
		 		}
		 		else{
		 			String bodyParam = &quot;body-&quot;+contador;
		 			vars.put(bodyParam,cell.getStringCellValue());
		 			contador++;
		 			log.info(&quot;cuerpo es &quot;+cell.getStringCellValue());
		 		}
		 		//log.info(&quot;se leyo vacio &quot;);
		 	break;	 	
			case &quot;NUMERIC&quot;:
			if(isHeader){
		 		String headerParam =&quot;header-&quot;+j;
		 		long headerValue = (long)cell.getNumericCellValue();
		 		vars.put(headerParam,headerValue.toString());
		 		sampler.getHeaderManager().removeHeaderNamed(listRow.get(1).getCell(j).getStringCellValue());
				sampler.getHeaderManager().add(new Header(listRow.get(1).getCell(j).getStringCellValue(),vars.get(headerParam)));
		 		//log.info(&quot;agrego &quot;+listRow.get(1).getCell(j).getStringCellValue());
		 		}
		 		else{
		 			String bodyParam = &quot;body-&quot;+contador;
		 			long bodyValue = (long)cell.getNumericCellValue();
		 			vars.put(bodyParam,bodyValue.toString());
		 			contador++;
		 			log.info(&quot;cuerpo es &quot;+bodyValue.toString());
		 		}
		 	   //log.info(&quot;se leyo numeric &quot;+((long)cell.getNumericCellValue()));
		 	break;
		 }
		
 		
     	
 	}
 

num = num+1;

vars.put(&quot;i&quot;,num.toString());
input.close();
*/


</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Petición HTTP" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables definidas por el Usuario" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">jsonplaceholder.typicode.com</stringProp>
          <stringProp name="HTTPSampler.port">${Puerto}</stringProp>
          <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Ruta}</stringProp>
          <stringProp name="HTTPSampler.method">${Method}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor Parametros" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.threads.JMeterVariables;
import org.apache.jmeter.protocol.http.control.Header;
import org.jmeter.excel.*;

log.info(&quot;inicio&quot;);

String ruta = vars.get(&quot;data&quot;);

Work work = new Work(ruta);
        
ArrayList&lt;Parametro&gt; lasPropiedades = work.getSheetParametros().getListPropiedades();
        
for (Parametro parametro:lasPropiedades) {
   vars.put(parametro.getName(), parametro.getValue());
   log.info(parametro.getName());
}

work.close();</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor Cuerpo" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.threads.JMeterVariables;
import org.apache.jmeter.protocol.http.control.Header
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
import org.jmeter.excel.*;


log.info(&quot;inicio&quot;);

String ruta = vars.get(&quot;data&quot;);
String link = vars.get(&quot;Ruta&quot;);
String method = vars.get(&quot;Method&quot;);
String indice = vars.get(&quot;i&quot;);

int num = Integer.parseInt(indice);

Work work = new Work(ruta);

ArrayList&lt;Parametro&gt; list = work.getSheetDatos().getListParametrosHeader(num);

//Agregar Header
log.info(&quot;Cargando header&quot;);
for (Parametro parametro:list) {
   vars.put(parametro.getName(), parametro.getValue());   
   sampler.getHeaderManager().removeHeaderNamed(parametro.getName());
   sampler.getHeaderManager().add(new Header(parametro.getName(),vars.get(parametro.getName())));
}
log.info(&quot;Terminando header&quot;);
//Agregar Path
log.info(&quot;Cargando path&quot;);
list = work.getSheetDatos().getListParametrosPath(num);
if(list.size()!=0){
	String path = &quot;/&quot;;
	for (Parametro parametro:list) {
	   path = path + parametro.getValue()+&quot;/&quot;;
	}
	path = path.substring(0,(path.length()-1));
	link = link+path;
	vars.put(&quot;Ruta&quot;,link);
}
log.info(&quot;Terminando Path&quot;);
//Agregando Query
log.info(&quot;Cargando Query&quot;);
list = work.getSheetDatos().getListParametrosQuery(num);
if(list.size()!=0 &amp;&amp; method.equals(&quot;GET&quot;)){
	for (Parametro parametro:list) {
	   sampler.addArgument(parametro.getName(),parametro.getValue());
	}
}
log.info(&quot;Terminando Query&quot;);
//Agregando Body
log.info(&quot;Cargando Body&quot;);
list = work.getSheetDatos().getListParametrosBody(num);
if(list.size()!=0 &amp;&amp; !method.equals(&quot;GET&quot;)){
	sampler.addNonEncodedArgument(&quot;&quot;,list.get(0).getValue(),&quot;&quot;);
}
log.info(&quot;Terminando Body&quot;);

num = num+1;
vars.put(&quot;i&quot;,num.toString());
work.close();

//sampler.addNonEncodedArgument(&quot;&quot;,&quot;{ data: {\&quot;title\&quot;: \&quot;venkatachalam\&quot;, \&quot;body\&quot;: \&quot;Venkata\&quot;, \&quot;userId\&quot;: 3} }&quot;,&quot;&quot;);
//sampler.addArgument(&quot;name&quot;, &quot;jhony&quot;);
//sampler.addArgument(&quot;apellido&quot;,&quot;Sarria&quot;);
//sampler.addArgument(&quot;Salazar&quot;, &quot;Gomez&quot;);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserción de Respuesta Header" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1292874420">Code: ${body-2}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserción de Respuesta Body" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-751172375">&quot;StatusDesc&quot;:&quot;${body-3}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Reporte resumen" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">G:\JMeter\Script\Result.xml</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="Ver Resultados en Árbol" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">G:\JMeter\Script\Result.xml</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados" enabled="true">
            <boolProp name="ResultCollector.error_logging">true</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>true</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>true</responseData>
                <samplerData>true</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>true</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <fileName>true</fileName>
                <hostname>true</hostname>
                <threadCounts>true</threadCounts>
                <sampleCount>true</sampleCount>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">D:\Jhony\jmeter Script\datos.csv</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
